// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(didFFI)
    import didFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_didresolver_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_didresolver_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol DidProtocol: AnyObject {
    func resolve() throws -> DidDoc
}

public class Did:
    DidProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_didresolver_fn_clone_did(self.pointer, $0) }
    }

    public convenience init(text: String) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_didresolver_fn_constructor_did_new(
                FfiConverterString.lower(text), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_didresolver_fn_free_did(pointer, $0) }
    }

    public func resolve() throws -> DidDoc {
        return try FfiConverterTypeDidDoc.lift(
            rustCallWithError(FfiConverterTypeDidResolveError.lift) {
                uniffi_didresolver_fn_method_did_resolve(self.uniffiClonePointer(), $0)
            }
        )
    }
}

public struct FfiConverterTypeDid: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Did

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Did {
        return Did(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Did) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Did {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Did, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeDid_lift(_ pointer: UnsafeMutableRawPointer) throws -> Did {
    return try FfiConverterTypeDid.lift(pointer)
}

public func FfiConverterTypeDid_lower(_ value: Did) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDid.lower(value)
}

public struct DidDoc {
    public var context: [String]
    public var id: String
    public var verificationMethod: [PublicKey]
    public var authentication: [PublicKey]
    public var capabilityInvocation: [PublicKey]
    public var capabilityDelegation: [PublicKey]
    public var assertionMethod: [PublicKey]
    public var controller: [String]
    public var deactivated: Bool?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        context: [String],
        id: String,
        verificationMethod: [PublicKey],
        authentication: [PublicKey],
        capabilityInvocation: [PublicKey],
        capabilityDelegation: [PublicKey],
        assertionMethod: [PublicKey],
        controller: [String],
        deactivated: Bool?
    ) {
        self.context = context
        self.id = id
        self.verificationMethod = verificationMethod
        self.authentication = authentication
        self.capabilityInvocation = capabilityInvocation
        self.capabilityDelegation = capabilityDelegation
        self.assertionMethod = assertionMethod
        self.controller = controller
        self.deactivated = deactivated
    }
}

extension DidDoc: Equatable, Hashable {
    public static func == (lhs: DidDoc, rhs: DidDoc) -> Bool {
        if lhs.context != rhs.context {
            return false
        }
        if lhs.id != rhs.id {
            return false
        }
        if lhs.verificationMethod != rhs.verificationMethod {
            return false
        }
        if lhs.authentication != rhs.authentication {
            return false
        }
        if lhs.capabilityInvocation != rhs.capabilityInvocation {
            return false
        }
        if lhs.capabilityDelegation != rhs.capabilityDelegation {
            return false
        }
        if lhs.assertionMethod != rhs.assertionMethod {
            return false
        }
        if lhs.controller != rhs.controller {
            return false
        }
        if lhs.deactivated != rhs.deactivated {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(context)
        hasher.combine(id)
        hasher.combine(verificationMethod)
        hasher.combine(authentication)
        hasher.combine(capabilityInvocation)
        hasher.combine(capabilityDelegation)
        hasher.combine(assertionMethod)
        hasher.combine(controller)
        hasher.combine(deactivated)
    }
}

public struct FfiConverterTypeDidDoc: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DidDoc {
        return
            try DidDoc(
                context: FfiConverterSequenceString.read(from: &buf),
                id: FfiConverterString.read(from: &buf),
                verificationMethod: FfiConverterSequenceTypePublicKey.read(from: &buf),
                authentication: FfiConverterSequenceTypePublicKey.read(from: &buf),
                capabilityInvocation: FfiConverterSequenceTypePublicKey.read(from: &buf),
                capabilityDelegation: FfiConverterSequenceTypePublicKey.read(from: &buf),
                assertionMethod: FfiConverterSequenceTypePublicKey.read(from: &buf),
                controller: FfiConverterSequenceString.read(from: &buf),
                deactivated: FfiConverterOptionBool.read(from: &buf)
            )
    }

    public static func write(_ value: DidDoc, into buf: inout [UInt8]) {
        FfiConverterSequenceString.write(value.context, into: &buf)
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterSequenceTypePublicKey.write(value.verificationMethod, into: &buf)
        FfiConverterSequenceTypePublicKey.write(value.authentication, into: &buf)
        FfiConverterSequenceTypePublicKey.write(value.capabilityInvocation, into: &buf)
        FfiConverterSequenceTypePublicKey.write(value.capabilityDelegation, into: &buf)
        FfiConverterSequenceTypePublicKey.write(value.assertionMethod, into: &buf)
        FfiConverterSequenceString.write(value.controller, into: &buf)
        FfiConverterOptionBool.write(value.deactivated, into: &buf)
    }
}

public func FfiConverterTypeDidDoc_lift(_ buf: RustBuffer) throws -> DidDoc {
    return try FfiConverterTypeDidDoc.lift(buf)
}

public func FfiConverterTypeDidDoc_lower(_ value: DidDoc) -> RustBuffer {
    return FfiConverterTypeDidDoc.lower(value)
}

public struct Jwk {
    public var kty: String
    public var crv: String
    public var x: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        kty: String,
        crv: String,
        x: String
    ) {
        self.kty = kty
        self.crv = crv
        self.x = x
    }
}

extension Jwk: Equatable, Hashable {
    public static func == (lhs: Jwk, rhs: Jwk) -> Bool {
        if lhs.kty != rhs.kty {
            return false
        }
        if lhs.crv != rhs.crv {
            return false
        }
        if lhs.x != rhs.x {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(kty)
        hasher.combine(crv)
        hasher.combine(x)
    }
}

public struct FfiConverterTypeJwk: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Jwk {
        return
            try Jwk(
                kty: FfiConverterString.read(from: &buf),
                crv: FfiConverterString.read(from: &buf),
                x: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: Jwk, into buf: inout [UInt8]) {
        FfiConverterString.write(value.kty, into: &buf)
        FfiConverterString.write(value.crv, into: &buf)
        FfiConverterString.write(value.x, into: &buf)
    }
}

public func FfiConverterTypeJwk_lift(_ buf: RustBuffer) throws -> Jwk {
    return try FfiConverterTypeJwk.lift(buf)
}

public func FfiConverterTypeJwk_lower(_ value: Jwk) -> RustBuffer {
    return FfiConverterTypeJwk.lower(value)
}

public struct PublicKey {
    public var id: String
    public var keyType: String
    public var controller: String
    public var publicKeyMultibase: String?
    public var publicKeyJwk: Jwk?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        id: String,
        keyType: String,
        controller: String,
        publicKeyMultibase: String?,
        publicKeyJwk: Jwk?
    ) {
        self.id = id
        self.keyType = keyType
        self.controller = controller
        self.publicKeyMultibase = publicKeyMultibase
        self.publicKeyJwk = publicKeyJwk
    }
}

extension PublicKey: Equatable, Hashable {
    public static func == (lhs: PublicKey, rhs: PublicKey) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.keyType != rhs.keyType {
            return false
        }
        if lhs.controller != rhs.controller {
            return false
        }
        if lhs.publicKeyMultibase != rhs.publicKeyMultibase {
            return false
        }
        if lhs.publicKeyJwk != rhs.publicKeyJwk {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(keyType)
        hasher.combine(controller)
        hasher.combine(publicKeyMultibase)
        hasher.combine(publicKeyJwk)
    }
}

public struct FfiConverterTypePublicKey: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKey {
        return
            try PublicKey(
                id: FfiConverterString.read(from: &buf),
                keyType: FfiConverterString.read(from: &buf),
                controller: FfiConverterString.read(from: &buf),
                publicKeyMultibase: FfiConverterOptionString.read(from: &buf),
                publicKeyJwk: FfiConverterOptionTypeJwk.read(from: &buf)
            )
    }

    public static func write(_ value: PublicKey, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.keyType, into: &buf)
        FfiConverterString.write(value.controller, into: &buf)
        FfiConverterOptionString.write(value.publicKeyMultibase, into: &buf)
        FfiConverterOptionTypeJwk.write(value.publicKeyJwk, into: &buf)
    }
}

public func FfiConverterTypePublicKey_lift(_ buf: RustBuffer) throws -> PublicKey {
    return try FfiConverterTypePublicKey.lift(buf)
}

public func FfiConverterTypePublicKey_lower(_ value: PublicKey) -> RustBuffer {
    return FfiConverterTypePublicKey.lower(value)
}

public enum DidResolveError {
    case DidNotSupported(message: String)

    case HttpError(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeDidResolveError.lift(error)
    }
}

public struct FfiConverterTypeDidResolveError: FfiConverterRustBuffer {
    typealias SwiftType = DidResolveError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DidResolveError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .DidNotSupported(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .HttpError(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DidResolveError, into buf: inout [UInt8]) {
        switch value {
        case .DidNotSupported(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        case .HttpError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(2))
        }
    }
}

extension DidResolveError: Equatable, Hashable {}

extension DidResolveError: Error {}

private struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeJwk: FfiConverterRustBuffer {
    typealias SwiftType = Jwk?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeJwk.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeJwk.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypePublicKey: FfiConverterRustBuffer {
    typealias SwiftType = [PublicKey]

    public static func write(_ value: [PublicKey], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePublicKey.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PublicKey] {
        let len: Int32 = try readInt(&buf)
        var seq = [PublicKey]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypePublicKey.read(from: &buf))
        }
        return seq
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_didresolver_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_didresolver_checksum_method_did_resolve() != 49324 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_didresolver_checksum_constructor_did_new() != 50637 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
